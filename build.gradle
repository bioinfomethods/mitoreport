import java.time.OffsetDateTime

buildscript {
    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
    repositories {
        mavenCentral()
    }
}

plugins {
    id "groovy"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id("io.micronaut.application") version "3.7.9"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

group "mitoreport"
defaultTasks 'clean', 'installShadowDist'

def gitDescribeItems = ['0.1.0', '1', 'gfffffff']
def gitDescProc = "git describe --tags --always --long".execute()
gitDescProc.waitFor()
def gitExitValue = gitDescProc.exitValue()
if (!gitExitValue && !(System.env.CI)) {
    gitDescribeItems = gitDescProc.text?.trim()?.split(/-/)
}

project.ext {
    appArchiveVersion = gitDescribeItems[0]
    appVersion = gitDescribeItems[1]
    appVersionLong = gitDescribeItems.join('-')
    buildTimestamp = OffsetDateTime.now().toString()
    buildCommit = gitDescribeItems[-1]
}

repositories {
    mavenCentral()
    maven {
        name 'jfrog-genepi-maven'
        url 'https://genepi.jfrog.io/artifactory/maven'
    }
}

micronaut {
    version = "$micronautVersion"
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("mitoreport.*")
    }
}

dependencies {
    implementation("info.picocli:picocli")
    implementation("io.micronaut.groovy:micronaut-runtime-groovy")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.picocli:micronaut-picocli")
    implementation("jakarta.annotation:jakarta.annotation-api")
    compileOnly("info.picocli:picocli-codegen")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.yaml:snakeyaml")
    implementation("io.micronaut:micronaut-validation")

    testImplementation platform("org.spockframework:spock-bom:$spockBomVersion")
    testImplementation("io.micronaut.test:micronaut-test-spock")
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.junit.platform:junit-platform-launcher:$junitPlatformLauncherVersion"
    testRuntimeOnly "net.bytebuddy:byte-buddy:$byteBuddyVersion"  // allows mocking of classes (in addition to interfaces)
    testRuntimeOnly "org.objenesis:objenesis:$objenesisVersion"

    implementation files('gngs/build/libs/groovy-ngs-utils.jar')
    implementation files('libs/haplogrep.jar')
    implementation files('libs/haplogrep-core-2.6.0.jar')

    // groovy-ngs-utils.jar is an uber jar with the following groovy modules.
    // Here we force upgrade the version.
//    implementation "org.codehaus.groovy:groovy-all:$groovyVersion"
    implementation "org.codehaus.groovy:groovy-ant:$groovyVersion"
    implementation "org.codehaus.groovy:groovy-cli-commons:$groovyVersion"
    implementation "org.codehaus.groovy:groovy-cli-picocli:$groovyVersion"
    implementation "org.codehaus.groovy:groovy-groovydoc:$groovyVersion"
    implementation "org.codehaus.groovy:groovy-json:$groovyVersion"
    implementation "org.codehaus.groovy:groovy-sql:$groovyVersion"
    implementation "org.codehaus.groovy:groovy-templates:$groovyVersion"
    implementation "org.codehaus.groovy:groovy-xml:$groovyVersion"
    implementation "org.codehaus.groovy:groovy:$groovyVersion"

    implementation "io.github.http-builder-ng:http-builder-ng-core:$httpBuilderNgVersion"
    implementation "commons-io:commons-io:$commonsIoVersion"
}

dependencyLocking {
    lockAllConfigurations()
}

tasks.withType(Test).configureEach {
    exclude 'groovy-ngs-utils/**'
    exclude 'gngs/**'
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
    }
}

mainClassName = "mitoreport.MitoCli"

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
}

jar {
    manifest {
        attributes(
                'Name': 'mitoreport',
                'Main-Class': application.mainClass,
                'Implementation-Title': 'mitoreport',
                'Implementation-Version': appVersionLong,
                'Implementation-Vendor': 'MCRI Bioinfomethods Groups',
                'Build-Timestamp': buildTimestamp,
                'Build-Commit': buildCommit,
        )
    }
}

shadowJar {
    mergeServiceFiles()
    archiveVersion.set(appArchiveVersion)
}

String mitoOut = "${projectDir}/src/main/resources/mitoui"
task cleanMitoOut(type: Delete) {
    delete mitoOut
}

task copyUiBuildToMitoOut(type: Copy, dependsOn: ['cleanMitoOut', ':ui:runBuild']) {
    group = 'build'
    description 'Copy UI build output into application resources'

    from project(':ui').getTasksByName('runBuild', false).first().outputs
    into mitoOut
}

application {
    mainClass.set("mitoreport.MitoCli")
    applicationName = 'mitoreport'
}

shadowJar.configure {
    inputs.dir(mitoOut).withPropertyName('mitoOut')
}

task buildGngs(type: Exec) {
    group = 'build'
    description 'Build groovy-ngs-utils module dependency'
    workingDir './gngs'
    commandLine './gradlew', 'jar'

    inputs.dir('gngs').withPropertyName('gngs')
    outputs.file('gngs/build/libs/groovy-ngs-utils.jar').withPropertyName('gngsJar')
}

//test.dependsOn += ['ui:runTestUnit']
check.dependsOn += ['ui:runLint']
compileJava.dependsOn += ['buildGngs']
processResources.dependsOn += ['copyUiBuildToMitoOut']
assemble.mustRunAfter 'check'
