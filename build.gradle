import java.time.OffsetDateTime

plugins {
    id "groovy"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "application"
}

group "mitoreport"
defaultTasks 'clean', 'build'

def gitDescribeItems = []
def gitDescProc = "git describe --tags".execute()
gitDescProc.waitFor()
if (gitDescProc.exitValue()) {
    gitDescribeItems = ['v00.00.00', '1', 'gfffffff']
} else {
    gitDescribeItems = gitDescProc.text?.trim()?.split(/-/)
}

project.ext {
    appVersion = "${gitDescribeItems[0]}-${gitDescribeItems[1]}"
    appArchiveVersion = "${gitDescribeItems[0]}"
    buildTimestamp = OffsetDateTime.now().toString()
    buildCommit = gitDescribeItems[2]
}

repositories {
    mavenCentral()
    maven {
        name 'jfrog-genepi-maven'
        url 'https://genepi.jfrog.io/artifactory/maven'
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut.configuration:micronaut-picocli"
    compileOnly platform("io.micronaut:micronaut-bom:$micronautVersion")
    compileOnly "io.micronaut:micronaut-inject-groovy"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-runtime-groovy"
    implementation "io.micronaut:micronaut-validation"
    implementation "info.picocli:picocli"
    implementation "io.micronaut.configuration:micronaut-picocli"
    testCompileOnly platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "io.micronaut.test:micronaut-test-spock"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntime "cglib:cglib-nodep:$cglibNoDepVersion"

    implementation files('gngs/build/libs/groovy-ngs-utils.jar')
    implementation files('haplogrep-cmd/target/haplogrep.jar')

    // groovy-ngs-utils.jar is an uber jar with the following groovy modules.
    // Here we force upgrade the version.
    implementation "org.codehaus.groovy:groovy-all:$groovyVersion"
    implementation "org.codehaus.groovy:groovy-ant:$groovyVersion"
    implementation "org.codehaus.groovy:groovy-cli-commons:$groovyVersion"
    implementation "org.codehaus.groovy:groovy-cli-picocli:$groovyVersion"
    implementation "org.codehaus.groovy:groovy-groovydoc:$groovyVersion"
    implementation "org.codehaus.groovy:groovy-json:$groovyVersion"
    implementation "org.codehaus.groovy:groovy-sql:$groovyVersion"
    implementation "org.codehaus.groovy:groovy-templates:$groovyVersion"
    implementation "org.codehaus.groovy:groovy-xml:$groovyVersion"
    implementation "org.codehaus.groovy:groovy:$groovyVersion"
    implementation "genepi:haplogrep-core:2.6.0"

    implementation "io.github.http-builder-ng:http-builder-ng-core:$httpBuilderNgVersion"
    implementation "commons-io:commons-io:$commonsIoVersion"
}

test.classpath += configurations.developmentOnly

mainClassName = "mitoreport.MitoCli"

java {
    sourceCompatibility = JavaVersion.toVersion('1.8')
    targetCompatibility = JavaVersion.toVersion('1.8')
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
}

jar {
    manifest {
        attributes(
                'Name': 'MitoReport',
                'Main-Class': mainClassName,
                'Implementation-Title': 'MitoReport',
                'Implementation-Version': appVersion,
                'Implementation-Vendor': 'MCRI',
                'Build-Timestamp': buildTimestamp,
                'Build-Commit': buildCommit,
        )
    }
}

shadowJar {
    mergeServiceFiles()
    archiveVersion.set(appArchiveVersion)
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
                'micronaut.io.watch.restart': 'true',
                'micronaut.io.watch.enabled': 'true',
                "micronaut.io.watch.paths": "src/main"
        )
    }
}

String mitoOut = "${projectDir}/src/main/resources/mitoui"
task cleanMitoOut(type: Delete) {
    delete mitoOut
}

task copyUiBuildToMitoOut(type: Copy, dependsOn: ['cleanMitoOut', ':ui:runBuild']) {
    group = 'build'
    description 'Copy UI build output into application resources'

    from project(':ui').getTasksByName('runBuild', false).first().outputs
    into mitoOut
}

shadowJar.configure {
    inputs.dir(mitoOut).withPropertyName('mitoOut')
}

task buildGngs(type: Exec) {
    group = 'build'
    description 'Build groovy-ngs-utils module dependency'
    workingDir './gngs'
    commandLine './gradlew', 'jar'

    inputs.dir('gngs').withPropertyName('gngs')
    outputs.file('gngs/build/libs/groovy-ngs-utils.jar').withPropertyName('gngsJar')
}

task buildHaplogrepCmd(type: Exec) {
    group = 'build'
    description 'Build haplogrep-cmd module dependency'
    workingDir './'
    commandLine './mvnw', '-f', "${projectDir.absolutePath}${File.separator}haplogrep-cmd${File.separator}pom.xml", 'package', '-DskipTests'

    inputs.dir('haplogrep-cmd').withPropertyName('haplogrep-cmd')
    outputs.file('haplogrep-cmd/target/haplogrep.jar').withPropertyName('haplogrepJar')
}

test.dependsOn += ['ui:runTestUnit']
check.dependsOn += ['ui:runLint']
compileJava.dependsOn += ['buildGngs', 'buildHaplogrepCmd']
processResources.dependsOn += ['copyUiBuildToMitoOut']
assemble.mustRunAfter 'check'
