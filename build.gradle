plugins {
  id "groovy"
  id "com.github.johnrengelman.shadow" version "6.0.0"
  id "application"
}

version "0.1"
group "au.edu.mcri.mitoreport"
defaultTasks 'build'

repositories {
  mavenCentral()
  jcenter()
}

configurations {
  // for dependencies that are needed for development only
  developmentOnly
}

dependencies {
  compileOnly(platform("io.micronaut:micronaut-bom:$micronautVersion"))
  compileOnly("io.micronaut:micronaut-inject-groovy")
  compileOnly("info.picocli:picocli-codegen:4.2.0")
  implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
  implementation("io.micronaut:micronaut-inject")
  implementation("io.micronaut:micronaut-validation")
  implementation("io.micronaut.groovy:micronaut-runtime-groovy")
  implementation("info.picocli:picocli")
  implementation("io.micronaut.picocli:micronaut-picocli")
  developmentOnly("io.micronaut:micronaut-runtime-osx:$micronautVersion")
  runtimeOnly("ch.qos.logback:logback-classic")
  testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
  testImplementation("io.micronaut:micronaut-inject-groovy")
  testImplementation("org.spockframework:spock-core") {
    exclude group: "org.codehaus.groovy", module: "groovy-all"
  }
  testImplementation("io.micronaut.test:micronaut-test-spock")

  implementation files('gngs/build/libs/groovy-ngs-utils.jar')
  implementation "org.codehaus.groovy:groovy-all:$groovyVersion"
  implementation "commons-io:commons-io:$commonsIoVersion"
}

test.classpath += configurations.developmentOnly

mainClassName = "au.edu.mcri.mitoreport.MitoReport"

// use JUnit 5 platform
test {
  useJUnitPlatform()
}

java {
  sourceCompatibility = JavaVersion.toVersion('1.8')
  targetCompatibility = JavaVersion.toVersion('1.8')
}

tasks.withType(GroovyCompile) {
  groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
}

shadowJar {
  mergeServiceFiles()
}

tasks.withType(JavaExec) {
  classpath += configurations.developmentOnly
  jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
  if (gradle.startParameter.continuous) {
    systemProperties(
      'micronaut.io.watch.restart': 'true',
      'micronaut.io.watch.enabled': 'true',
      "micronaut.io.watch.paths": "src/main"
    )
  }
}

String mitoOut = "${projectDir}/src/main/resources/mitoreport"
task cleanMitoOut(type: Delete) {
  delete mitoOut
}

task copyUiBuildToMitoOut(dependsOn: ['cleanMitoOut', ':ui:runBuild']) {
  group = 'build'
  description 'Copy UI build output into application resources'
  doLast {
    copy {
      from "${project(':ui').projectDir}/dist"
      into mitoOut
    }
  }
}

task buildGngs(type: Exec) {
  group = 'build'
  description 'Build groovy-ngs-utils module dependency'
  workingDir './gngs'
  commandLine './gradlew', 'jar'
}

test.dependsOn += ['ui:runTestUnit']
check.dependsOn += ['ui:runLint']
assemble.dependsOn += ['buildGngs', 'copyUiBuildToMitoOut']
